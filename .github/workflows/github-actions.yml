name: PHPUnit tests

on:
  push:
    branches:
      - master
      - github-actions
      - test
  pull_request:
    branches:
      - master
      - test
jobs:
  provide_php_versions_json:
    runs-on: ubuntu-latest

    steps:
      # git clone + use PHP + composer install
      - uses: actions/checkout@v2
      - uses: shivammathur/setup-php@v2
        with:
          php-version: 8.1

      - uses: "ramsey/composer-install@v1"
      # to see the output
      - run: vendor/bin/easy-ci php-versions-json

      # here we create the json, we need the "id:" so we can use it in "outputs" below
      - id: output_data
        run: echo "::set-output name=matrix::$(vendor/bin/easy-ci php-versions-json)"

      # here, we save the result of this 1st phase to the "outputs"
    outputs:
      matrix: ${{ steps.output_data.outputs.matrix }}

  build-and-test:
    needs: provide_php_versions_json
    strategy:
      fail-fast: false
      matrix:
        php: ${{ fromJson(needs.provide_php_versions_json.outputs.matrix) }}
#        laravel: [^6.0, ^7.0, ^8.0, ^9.0]
        laravel: [^8.0]
#        dbal: [^2.6, ^3.0]
        dbal: [^3.0]
        exclude:
          - php: 7.2
            laravel: ^8.0
          - php: 7.2
            laravel: ^9.0
          - php: 7.3
            laravel: ^9.0
          - php: 7.4
            laravel: ^9.0
          - php: 8.1
            laravel: ^6.0
          - php: 8.1
            laravel: ^7.0
          - laravel: ^6.0
            dbal: ^3.0
          - laravel: ^7.0
            dbal: ^3.0
            
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}

      - uses: "ramsey/composer-install@v1"
        with:
          dependency-versions: "highest"
          composer-options: "--with laravel/framework:${{ matrix.laravel }} --with doctrine/dbal:${{ matrix.dbal }}"
      - name: Create Database Containers
        run: docker-compose -f docker-compose.yml up -d
      - name: Run PHPUnit Tests
        run: vendor/bin/phpunit -c phpunit.xml.dist --cache-result-file=.phpunit.result.cache
